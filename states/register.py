import asyncio
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram import types, Dispatcher, Bot
from aiohttp import ClientSession
from src.database.main_database import db
from aiogram.dispatcher.filters.state import StatesGroup, State
from src.keyboards.keyboard_for_users import double_keyboard, triple_keyboard, keyboard, inline_kb
from src.config import TelegramBot
from src.generator.description_generator import random_desc_for_men, random_desc_for_women
from aiogram.types import ChatActions

bot = Bot(token=TelegramBot.token)


class UserStates(StatesGroup):
    gender = State()
    name = State()
    age = State()
    photo = State()
    description = State()
    look_for = State()


class SetUsername(StatesGroup):
    username = State()


async def process_gender(message: types.Message):
    if not db.check_users_existence(message.from_user.id):
        if message.from_user.username is not None:
            await message.reply("–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º. –ö—Ç–æ –≤—ã? üëá",
                                reply_markup=triple_keyboard("–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
            await UserStates.gender.set()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É —Å–µ–±—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö <b>username</b>"
                                 " (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), —á—Ç–æ–±—ã –ø—Ä–∏ –∫–æ–Ω—Ç–∞–∫—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏ —è —Å–º–æ–≥ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à—É"
                                 " —Å—Å—ã–ª–∫—É —ç—Ç–∏–º –ª—é–¥—è–º", reply_markup=double_keyboard("–°–¥–µ–ª–∞–Ω–æ ‚úÖ", "–ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å üòî"),
                                 parse_mode=types.ParseMode.HTML)
            await SetUsername.username.set()
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))


async def process_username(message: types.Message, state: FSMContext):
    if message.text == "–°–¥–µ–ª–∞–Ω–æ ‚úÖ":
        await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é...")
        await bot.send_chat_action(message.from_user.id, ChatActions.TYPING)
        await asyncio.sleep(1.5)
        if message.from_user.username is not None:
            await state.finish()
            await process_gender(message=message)
        else:
            await message.answer("–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                 reply_markup=double_keyboard("–°–¥–µ–ª–∞–Ω–æ ‚úÖ", "–ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å üòî"))
    elif message.text == "–ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å üòî":
        await message.answer("""–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –≤–µ—Ä—Ö–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É.
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.
3. –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≤–Ω–∏–∑ –¥–æ —Ä–∞–∑–¥–µ–ª–∞ ¬´–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ.
4. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. –ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.
5. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –≤–≤–µ–ª–∏ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n–°–µ–π—á–∞—Å
–ø—Ä–∏—à–ª—é –≤–∞–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ gif üòâ""",
                             reply_markup=double_keyboard('–°–¥–µ–ª–∞–Ω–æ ‚úÖ', '–ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å üòî'))
        with open(r"C:\Users\—Ö—ç–π\PycharmProjects\FilesOrganizer\src\other\animation.gif", "rb") as gif:
            await bot.send_animation(message.from_user.id, gif)
        return


async def process_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ê —á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ?", reply_markup=keyboard("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        return
    await state.finish()
    await message.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboard("–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))


async def bad_gender(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—É—é –Ω–∏–∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
                         reply_markup=triple_keyboard("–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
    return


async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.reply("–°—É–ø–µ—Ä! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=keyboard("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
    await UserStates.next()


async def not_name(message: types.Message):
    await message.answer("–£–ø—Å...–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                         reply_markup=keyboard("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
    return


async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.reply(f"{message.text}, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", reply_markup=keyboard("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
    await UserStates.next()


async def not_age(message: types.Message):
    await message.answer("–†–∞–∑–≤–µ —ç—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç? –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
                         reply_markup=keyboard("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
    return


async def wrong_age(message: types.Message):
    await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=keyboard("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
    return


async def process_photo(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.reply("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ —Ñ–æ—Ç–æ. –ï–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                        reply_markup=keyboard("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
    await UserStates.next()


async def not_photo(message: types.Message):
    await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ", reply_markup=keyboard("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
    return


async def process_desc(message: types.Message, state: FSMContext):
    async with ClientSession() as session:
        async with session.get(await message.photo[-1].get_url()) as response:
            photo = await response.read()

    await state.update_data(photo=photo)
    await message.reply(
        "–ö–ª–∞—Å—Å! –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, –±—É–∫–≤–∞–ª—å–Ω–æ –≤ –¥–≤—É—Ö-—Ç—Ä—ë—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö\n\n"
        "–õ–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –æ–ø–∏—Å–∞–Ω–∏—è",
        reply_markup=double_keyboard("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
    await UserStates.next()


async def generate_desc(message: types.Message, state: FSMContext):
    sex = await state.get_data()
    if sex['gender'] == "–ü–∞—Ä–µ–Ω—å":
        await message.answer(f"{random_desc_for_men()}\n\n–ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=inline_kb)
    else:
        await message.answer(f"{random_desc_for_women()}\n\n–ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=inline_kb)


async def callback_answer(call: types.CallbackQuery, state: FSMContext):
    sex = await state.get_data()
    if call.data == "use":
        await state.update_data(desc=call.message.text[:-25])
        await call.message.reply("–ß—É–¥–Ω–µ–Ω—å–∫–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.\n–ö—Ç–æ –≤–∞—à –±—É–¥—É—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫? ‚¨áÔ∏è",
                                 reply_markup=triple_keyboard("–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"))
        await UserStates.next()
    else:
        if sex['gender'] == "–ü–∞—Ä–µ–Ω—å":
            await call.message.edit_text(f"{random_desc_for_men()}\n\n–ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ?",
                                         reply_markup=inline_kb)
        else:
            await call.message.edit_text(f"{random_desc_for_women()}\n\n–ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ?",
                                         reply_markup=inline_kb)


async def not_desc(message: types.Message):
    await message.answer("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ"
                         "–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
                         reply_markup=double_keyboard("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
    return


async def weak_desc(message: types.Message):
    await message.answer("–ù—É –∂–µ, –æ–ø–∏—à–∏—Ç–µ —Å–µ–±—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–æ—á–Ω–æ!",
                         reply_markup=double_keyboard("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))


async def long_desc(message: types.Message):
    await message.answer("–û–≥–æ-–≥–æ –∫–∞–∫–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
                         reply_markup=double_keyboard("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))


async def process_looking_partner(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text)
    await message.reply("–ß—É–¥–Ω–µ–Ω—å–∫–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.\n–ö—Ç–æ –≤–∞—à –±—É–¥—É—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫? ‚¨áÔ∏è",
                        reply_markup=triple_keyboard("–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"))
    await UserStates.next()


async def process_not_chosen_from_kb(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—É—é –Ω–∏–∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
                         reply_markup=triple_keyboard("–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"))
    return


async def process_finish(message: types.Message, state: FSMContext):
    await state.update_data(partner=message.text)
    data = await state.get_data()
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=keyboard("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    username = member.user.username
    db.add_users_info(id=message.from_user.id, username=username, name=data['name'], age=data['age'],
                      gender=data['gender'], photo=data['photo'], desc=data['desc'], partner=data['partner'])
    await state.finish()


def register_form(dp: Dispatcher):
    dp.register_message_handler(process_gender, Text(equals="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", ignore_case=True))
    dp.register_message_handler(process_username, Text(contains="–°–¥–µ–ª–∞–Ω–æ ‚úÖ"), state=SetUsername.username)
    dp.register_message_handler(process_username, Text(contains="–ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å üòî"), state=SetUsername.username)
    dp.register_message_handler(process_cancel, Text(equals="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", ignore_case=True), state="*")
    dp.register_message_handler(bad_gender, lambda gender: gender.text.capitalize() not in ("–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"),
                                state=UserStates.gender)
    dp.register_message_handler(process_name, state=UserStates.gender)
    dp.register_message_handler(not_name, lambda name: not name.text.isalpha(), state=UserStates.name)
    dp.register_message_handler(process_age, state=UserStates.name)
    dp.register_message_handler(not_age, lambda age: not age.text.isdigit(), state=UserStates.age)
    dp.register_message_handler(wrong_age,
                                lambda invalid_age: int(invalid_age.text) < 10 or int(invalid_age.text) > 100,
                                state=UserStates.age)
    dp.register_message_handler(process_photo, state=UserStates.age)
    dp.register_message_handler(not_photo, lambda msg: not msg.photo, state=UserStates.photo)
    dp.register_message_handler(process_desc, content_types=['photo'], state=UserStates.photo)
    dp.register_message_handler(generate_desc, Text(equals="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è", ignore_case=True),
                                state=UserStates.description)
    dp.register_callback_query_handler(callback_answer, state=UserStates.description)
    dp.register_message_handler(not_desc, lambda desc: not desc.text, state=UserStates.description)
    dp.register_message_handler(weak_desc, lambda weak: len(weak.text.split()) <= 2, state=UserStates.description)
    dp.register_message_handler(long_desc, lambda long: len(long.text) > 350, state=UserStates.description)
    dp.register_message_handler(process_looking_partner, state=UserStates.description)
    dp.register_message_handler(process_not_chosen_from_kb,
                                lambda partner: partner.text.capitalize() not in ("–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"),
                                state=UserStates.look_for)
    dp.register_message_handler(process_finish, state=UserStates.look_for)
