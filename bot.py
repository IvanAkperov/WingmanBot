from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from src.keyboards.keyboard_for_users import triple_keyboard, keyboard
from src.config import TelegramBot
from src.states.register import register_form
from src.states.update_photo import register_new_photo
from src.states.delete_user_from_db import register_deleting_form
from src.states.update_description import register_new_description
from src.states.searching_forms import register_search
from src.database.main_database import db

bot = Bot(token=TelegramBot.token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot=bot, storage=MemoryStorage())
register_form(dp=dp)  # —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
register_new_description(dp=dp)  # —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
register_deleting_form(dp=dp)  # —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
register_new_photo(dp=dp)  # —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
register_search(dp=dp)  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–±–æ—Ä–∞ –∞–Ω–∫–µ—Ç


async def on_startup(_):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
    db.create_table()
    db.create_matching_table()
    print("–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!")


@dp.message_handler(commands=['start'])
@dp.message_handler(Text(equals="–ü–æ–º–æ—â—å", ignore_case=True))
async def process_start(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start, –ü–æ–º–æ—â—å"""
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, "
                         f"{message.from_user.username if message.from_user.username is not None else '–¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥'}"
                         f" ‚ù§Ô∏è!\n\n" 
                         f"–í—Å–µ–≥–æ –∑–∞ <i>–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤</i> –í—ã "
                         f"–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π <b>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π</b>"
                         f" –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üêº \n\n"
                         f"–≠—Ç–æ—Ç –±–æ—Ç —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥–∏—Ö"
                         f" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –æ—Ç–ª–∏—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å"
                         f" –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏! –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è"
                         f" –∫ <a href='https://t.me/xquisite_corpse'>—Å–æ–∑–¥–∞—Ç–µ–ª—é</a> —ç—Ç–æ–≥–æ –±–æ—Ç–∞"
                         f"\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚¨áÔ∏è",
                         reply_markup=keyboard("–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"), disable_web_page_preview=True)


@dp.message_handler(Text(equals="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", ignore_case=True))
async def main_menu(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=triple_keyboard("–ú–æ—è –∞–Ω–∫–µ—Ç–∞", "–ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç", "–ü–æ–º–æ—â—å"))


@dp.message_handler(Text(equals="–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É", ignore_case=True))
async def update_users_form(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    if db.check_users_existence(message.from_user.id):  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await message.answer("–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å?",  # —Ç–æ —É –Ω–µ–≥–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É
                             reply_markup=triple_keyboard("–û–ø–∏—Å–∞–Ω–∏–µ", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", "–ú–æ—è –∞–Ω–∫–µ—Ç–∞"))
    else:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å", reply_markup=keyboard("–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))


@dp.message_handler(Text(equals="–ú–æ—è –∞–Ω–∫–µ—Ç–∞", ignore_case=True))
async def update_all_users_form(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if db.check_users_existence(message.from_user.id):  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        for photo in db.printout_users_form(message.from_user.id):  # –ø—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –º–∞—Å—Å–∏–≤—É –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö
            await bot.send_photo(message.from_user.id,
                                 photo=photo[6],  # –≤—ã—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ
                                 caption=f"{photo[2]}, {photo[3]} –ª–µ—Ç\n\n{photo[5]}",  # –∑–∞–≥–æ–ª–æ–≤–æ–∫
                                 reply_markup=triple_keyboard("–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                                 )
    else:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å", reply_markup=keyboard("–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))


@dp.message_handler()  # —Ö–µ–Ω–¥–ª–µ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –¥—Ä—É–≥–∏–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def empty_handler(message: types.Message):
    await message.reply("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))


if __name__ == '__main__':
    try:
        executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
    except (KeyboardInterrupt, SystemExit) as ex:
        print("Bot has stopped.")
